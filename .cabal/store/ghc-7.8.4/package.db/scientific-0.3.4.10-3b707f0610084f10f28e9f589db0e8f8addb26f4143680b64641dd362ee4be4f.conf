name: scientific
version: 0.3.4.10
id: scientific-0.3.4.10-3b707f0610084f10f28e9f589db0e8f8addb26f4143680b64641dd362ee4be4f
key: scientific-0.3.4.10
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
abi: 9a3244a0b5370517442702a44a9f8d4b
trusted: False
import-dirs: /Users/travis/.cabal/store/ghc-7.8.4/scientific-0.3.4.10-3b707f0610084f10f28e9f589db0e8f8addb26f4143680b64641dd362ee4be4f/lib
library-dirs: /Users/travis/.cabal/store/ghc-7.8.4/scientific-0.3.4.10-3b707f0610084f10f28e9f589db0e8f8addb26f4143680b64641dd362ee4be4f/lib
data-dir: /Users/travis/.cabal/store/ghc-7.8.4/scientific-0.3.4.10-3b707f0610084f10f28e9f589db0e8f8addb26f4143680b64641dd362ee4be4f/share
hs-libraries: HSscientific-0.3.4.10-3b707f0610084f10f28e9f589db0e8f8addb26f4143680b64641dd362ee4be4f
depends:
    base-4.7.0.2-918c7ac27f65a87103264a9f51652d63
    binary-0.7.1.0-108d06eea2ef05e517f9c1facf10f63c
    bytestring-0.10.4.0-78bc8f2c724c765c78c004a84acf6cc3
    containers-0.5.5.1-d7910f1cd81272c1f31ca9f71d0f206e
    deepseq-1.3.0.2-0ddc77716bd2515426e1ba39f6788a4f
    ghc-prim-0.3.1.0-a24f9c14c632d75b683d0f93283aea37
    hashable-1.2.5.0-5ebc863a7d609aa1f12328162f29737912346cb6ba321ded3f86e1fe49ff3a54
    integer-gmp-0.5.1.0-26579559b3647acf4f01d5edd9491a46
    integer-logarithms-1.0.1-15270dc1aa5caed7c48c08c8a8fa9d5414949fd9d56938a4f8e652a2b5542f42
    text-1.2.2.1-988d22a5b7ed88355ce4af4120f7316273903a467084e0ef3cd64b460a20bf65
    vector-0.12.0.0-1ca45b2f8038225485f20dd0295aa0af63822917250566547e7da76344452db3
haddock-interfaces: /Users/travis/.cabal/store/ghc-7.8.4/scientific-0.3.4.10-3b707f0610084f10f28e9f589db0e8f8addb26f4143680b64641dd362ee4be4f/share/doc/html/scientific.haddock
haddock-html: /Users/travis/.cabal/store/ghc-7.8.4/scientific-0.3.4.10-3b707f0610084f10f28e9f589db0e8f8addb26f4143680b64641dd362ee4be4f/share/doc/html
