name: scientific
version: 0.3.4.10
id: scientific-0.3.4.10-09f97f687fd30e4be570c1bc4a733d18a4113a0680b88a5b8e789e940508c7c6
key: scientific-0.3.4.10
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
abi: e86f0bef8c28c387f893631922afb6ff
trusted: False
import-dirs: /home/travis/.cabal/store/ghc-7.8.4/scientific-0.3.4.10-09f97f687fd30e4be570c1bc4a733d18a4113a0680b88a5b8e789e940508c7c6/lib
library-dirs: /home/travis/.cabal/store/ghc-7.8.4/scientific-0.3.4.10-09f97f687fd30e4be570c1bc4a733d18a4113a0680b88a5b8e789e940508c7c6/lib
              /home/travis/.cabal/store/ghc-7.8.4/scientific-0.3.4.10-09f97f687fd30e4be570c1bc4a733d18a4113a0680b88a5b8e789e940508c7c6/lib
data-dir: /home/travis/.cabal/store/ghc-7.8.4/scientific-0.3.4.10-09f97f687fd30e4be570c1bc4a733d18a4113a0680b88a5b8e789e940508c7c6/share
hs-libraries: HSscientific-0.3.4.10-09f97f687fd30e4be570c1bc4a733d18a4113a0680b88a5b8e789e940508c7c6
depends:
    base-4.7.0.2-bfd89587617e381ae01b8dd7b6c7f1c1
    binary-0.7.1.0-f867dbbb69966feb9f5c4ef7695a70a5
    bytestring-0.10.4.0-d6f1d17d717e8652498cab8269a0acd5
    containers-0.5.5.1-d4bd887fb97aa3a46cbadc13709b7653
    deepseq-1.3.0.2-63a1ab91b7017a28bb5d04cb1b5d2d02
    ghc-prim-0.3.1.0-a24f9c14c632d75b683d0f93283aea37
    hashable-1.2.5.0-28c408c354fff20b337f98da8ef0861f0e81a097039d3dfee474e4ff0b5b49cd
    integer-gmp-0.5.1.0-26579559b3647acf4f01d5edd9491a46
    integer-logarithms-1.0.1-dc575fb39649626f560e718fdd83bbcf18f67bcdbd083d484ffee859f3d575f6
    text-1.2.2.1-edf142758954ed90129e9ba1d07d8c7575f8c4a526db1a6498541e848a02e155
    vector-0.12.0.0-fe501e4eb888e50c8f3daa5ce418a7f9dcd99eee4c4d278b22af46de65fdd9c6
haddock-interfaces: /home/travis/.cabal/store/ghc-7.8.4/scientific-0.3.4.10-09f97f687fd30e4be570c1bc4a733d18a4113a0680b88a5b8e789e940508c7c6/share/doc/html/scientific.haddock
haddock-html: /home/travis/.cabal/store/ghc-7.8.4/scientific-0.3.4.10-09f97f687fd30e4be570c1bc4a733d18a4113a0680b88a5b8e789e940508c7c6/share/doc/html
