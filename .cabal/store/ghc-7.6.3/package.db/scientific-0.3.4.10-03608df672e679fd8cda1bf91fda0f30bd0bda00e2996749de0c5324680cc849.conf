name: scientific
version: 0.3.4.10
id: scientific-0.3.4.10-03608df672e679fd8cda1bf91fda0f30bd0bda00e2996749de0c5324680cc849
key: scientific-0.3.4.10
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
abi: 02cca26358ca0551ce4eddc77db836be
trusted: False
import-dirs: /home/travis/.cabal/store/ghc-7.6.3/scientific-0.3.4.10-03608df672e679fd8cda1bf91fda0f30bd0bda00e2996749de0c5324680cc849/lib
library-dirs: /home/travis/.cabal/store/ghc-7.6.3/scientific-0.3.4.10-03608df672e679fd8cda1bf91fda0f30bd0bda00e2996749de0c5324680cc849/lib
              /home/travis/.cabal/store/ghc-7.6.3/scientific-0.3.4.10-03608df672e679fd8cda1bf91fda0f30bd0bda00e2996749de0c5324680cc849/lib
data-dir: /home/travis/.cabal/store/ghc-7.6.3/scientific-0.3.4.10-03608df672e679fd8cda1bf91fda0f30bd0bda00e2996749de0c5324680cc849/share
hs-libraries: HSscientific-0.3.4.10-03608df672e679fd8cda1bf91fda0f30bd0bda00e2996749de0c5324680cc849
depends:
    base-4.6.0.1-8aa5d403c45ea59dcd2c39f123e27d57
    binary-0.5.1.1-72ed744c57c32286a49da6dda4f660b7
    bytestring-0.10.0.2-4f93248f75667c2c3321a7a6761b576f
    bytestring-builder-0.10.8.1.0-3c782040ff453ef351eb29d1fe48ff3ff2cd0ddd5525f52535b0c76ac871a1a5
    containers-0.5.0.0-ab1dae9a94cd3cc84e7b2805636ebfa2
    deepseq-1.3.0.1-5cc4cd89bdc2e8f6db1833d95ec36926
    ghc-prim-0.3.0.0-d5221a8c8a269b66ab9a07bdc23317dd
    hashable-1.2.5.0-ee5415440dc055d2837dbd3ab35cfef033d851100a245598af767bb0e93e5a87
    integer-gmp-0.5.0.0-2f15426f5b53fe4c6490832f9b20d8d7
    integer-logarithms-1.0.1-ee6b9c233315d780af972a6b47b168cb117bc63a625d2bb21f965658a7b3bb5a
    text-1.2.2.1-7493815e5a87a61118401f830b5c16236ecbe14d5368a80eb92e445c04276cb7
    vector-0.12.0.0-e0fb9e1cf490dd7548f8e63f11968c378a00437441f2427362adcd8f1c5b27a2
haddock-interfaces: /home/travis/.cabal/store/ghc-7.6.3/scientific-0.3.4.10-03608df672e679fd8cda1bf91fda0f30bd0bda00e2996749de0c5324680cc849/share/doc/html/scientific.haddock
haddock-html: /home/travis/.cabal/store/ghc-7.6.3/scientific-0.3.4.10-03608df672e679fd8cda1bf91fda0f30bd0bda00e2996749de0c5324680cc849/share/doc/html
