name: scientific
version: 0.3.4.10
id: scientific-0.3.4.10-83f81f2a08e9cc7142f31a9e6a328875ffc7414b207a20514e4d2b0c81cda022
key: scientific-0.3.4.10
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
abi: 4d67822acd9b4ca7e0ae2be6f00c82cf
trusted: False
import-dirs: /home/travis/.cabal/store/ghc-7.4.2/scientific-0.3.4.10-83f81f2a08e9cc7142f31a9e6a328875ffc7414b207a20514e4d2b0c81cda022/lib
library-dirs: /home/travis/.cabal/store/ghc-7.4.2/scientific-0.3.4.10-83f81f2a08e9cc7142f31a9e6a328875ffc7414b207a20514e4d2b0c81cda022/lib
              /home/travis/.cabal/store/ghc-7.4.2/scientific-0.3.4.10-83f81f2a08e9cc7142f31a9e6a328875ffc7414b207a20514e4d2b0c81cda022/lib
data-dir: /home/travis/.cabal/store/ghc-7.4.2/scientific-0.3.4.10-83f81f2a08e9cc7142f31a9e6a328875ffc7414b207a20514e4d2b0c81cda022/share
hs-libraries: HSscientific-0.3.4.10-83f81f2a08e9cc7142f31a9e6a328875ffc7414b207a20514e4d2b0c81cda022
depends:
    base-4.5.1.0-6e4c9bdc36eeb9121f27ccbbcb62e3f3
    binary-0.5.1.0-1dd25e339bc04e2d8ca8103c35947bf6
    bytestring-0.9.2.1-503e91bb155301fdb1956cb5c26ce6e9
    bytestring-builder-0.10.8.1.0-b1a812206000cd2da5e8e3901ea7dbf3749dab082dd6ebeccaa7d37f1af90dd4
    containers-0.4.2.1-75f143aa39a3e77a1ce2300025bdd8ce
    deepseq-1.3.0.0-c26e15897417ecd448742528253d68f6
    ghc-prim-0.2.0.0-7d3c2c69a5e8257a04b2c679c40e2fa7
    hashable-1.2.5.0-1753b81c91c01369a64a293fc71798f80211249dbe2a695e5cec28e443750457
    integer-gmp-0.4.0.0-af3a28fdc4138858e0c7c5ecc2a64f43
    integer-logarithms-1.0.1-18b2663cedbe5e77d9730ed70652113ccbf979102393501d1c39d241c9f4ac0d
    text-1.2.2.1-01707262b492c5cdf7764949b484fdf6b5dcda4fc23a6797ead561c8a48326d0
    vector-0.12.0.0-46c27b28d8dda4b9a75e91e53a13a1b94b0ea569a850cf762128379049e3ff98
haddock-interfaces: /home/travis/.cabal/store/ghc-7.4.2/scientific-0.3.4.10-83f81f2a08e9cc7142f31a9e6a328875ffc7414b207a20514e4d2b0c81cda022/share/doc/html/scientific.haddock
haddock-html: /home/travis/.cabal/store/ghc-7.4.2/scientific-0.3.4.10-83f81f2a08e9cc7142f31a9e6a328875ffc7414b207a20514e4d2b0c81cda022/share/doc/html
