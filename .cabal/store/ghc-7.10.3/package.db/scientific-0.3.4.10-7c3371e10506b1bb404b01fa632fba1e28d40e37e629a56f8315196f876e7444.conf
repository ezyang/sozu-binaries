name: scientific
version: 0.3.4.10
id: scientific-0.3.4.10-7c3371e10506b1bb404b01fa632fba1e28d40e37e629a56f8315196f876e7444
key: 3I6x3Zfvp3xGSZeusLoQ4S
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
trusted: False
import-dirs: /Users/travis/.cabal/store/ghc-7.10.3/scientific-0.3.4.10-7c3371e10506b1bb404b01fa632fba1e28d40e37e629a56f8315196f876e7444/lib
library-dirs: /Users/travis/.cabal/store/ghc-7.10.3/scientific-0.3.4.10-7c3371e10506b1bb404b01fa632fba1e28d40e37e629a56f8315196f876e7444/lib
data-dir: /Users/travis/.cabal/store/ghc-7.10.3/scientific-0.3.4.10-7c3371e10506b1bb404b01fa632fba1e28d40e37e629a56f8315196f876e7444/share
hs-libraries: HSscientific-0.3.4.10-7c3371e10506b1bb404b01fa632fba1e28d40e37e629a56f8315196f876e7444
depends:
    base-4.8.2.0-cc43d8e06aa74e9c4c0132becc49ee25
    binary-0.7.5.0-6e00b63f955513e2407019611c681b56
    bytestring-0.10.6.0-8363d61ddfe397e767bde0e3fed6260e
    containers-0.5.6.2-68e3ece8a4f91a31e327fe89f8052a53
    deepseq-1.4.1.1-8eec8f9bea2efc2500f63544ec6ca569
    ghc-prim-0.4.0.0-6cdc86811872333585fa98756aa7c51e
    hashable-1.2.5.0-ebc34116ef8fedf407f9b2dc6f540ca111d742b0256366156400741053dcea93
    integer-gmp-1.0.0.0-3c8c40657a9870f5c33be17496806d8d
    integer-logarithms-1.0.1-1dd091f536a229c33ca705cf749099fbf7f85951029380a9f4286b5b9f018918
    text-1.2.2.1-621eb2118143cee2a9e1e92a8f0bb669fb0df3f8704862a96cce252c7aa855b2
    vector-0.12.0.0-4e649d18f0a63633a94ef0940305348062b819b200c42272d91b5d06384b0d4d
haddock-interfaces: /Users/travis/.cabal/store/ghc-7.10.3/scientific-0.3.4.10-7c3371e10506b1bb404b01fa632fba1e28d40e37e629a56f8315196f876e7444/share/doc/html/scientific.haddock
haddock-html: /Users/travis/.cabal/store/ghc-7.10.3/scientific-0.3.4.10-7c3371e10506b1bb404b01fa632fba1e28d40e37e629a56f8315196f876e7444/share/doc/html
