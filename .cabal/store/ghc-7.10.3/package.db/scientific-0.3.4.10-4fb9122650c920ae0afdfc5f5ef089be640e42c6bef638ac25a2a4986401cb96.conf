name: scientific
version: 0.3.4.10
id: scientific-0.3.4.10-4fb9122650c920ae0afdfc5f5ef089be640e42c6bef638ac25a2a4986401cb96
key: BaQ7FrEGTF9Fn9I9MkyTb4
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
trusted: False
import-dirs: /home/travis/.cabal/store/ghc-7.10.3/scientific-0.3.4.10-4fb9122650c920ae0afdfc5f5ef089be640e42c6bef638ac25a2a4986401cb96/lib
library-dirs: /home/travis/.cabal/store/ghc-7.10.3/scientific-0.3.4.10-4fb9122650c920ae0afdfc5f5ef089be640e42c6bef638ac25a2a4986401cb96/lib
              /home/travis/.cabal/store/ghc-7.10.3/scientific-0.3.4.10-4fb9122650c920ae0afdfc5f5ef089be640e42c6bef638ac25a2a4986401cb96/lib
data-dir: /home/travis/.cabal/store/ghc-7.10.3/scientific-0.3.4.10-4fb9122650c920ae0afdfc5f5ef089be640e42c6bef638ac25a2a4986401cb96/share
hs-libraries: HSscientific-0.3.4.10-4fb9122650c920ae0afdfc5f5ef089be640e42c6bef638ac25a2a4986401cb96
depends:
    base-4.8.2.0-0d6d1084fbc041e1cded9228e80e264d
    binary-0.7.5.0-5784fd031a720c3b84e73006e444c7ca
    bytestring-0.10.6.0-c60f4c543b22c7f7293a06ae48820437
    containers-0.5.6.2-e59c9b78d840fa743d4169d4bea15592
    deepseq-1.4.1.1-614b63b36dd6e29d2b35afff57c25311
    ghc-prim-0.4.0.0-6cdc86811872333585fa98756aa7c51e
    hashable-1.2.5.0-2f6dfa13fbe9d31f7fe1012e0b4ffbb03ceb55e65a6513e29bf53e9a7479abee
    integer-gmp-1.0.0.0-3c8c40657a9870f5c33be17496806d8d
    integer-logarithms-1.0.1-48322e9e0e1e199d983844e217cee8f53f7be377c45ff80a0f9a14130654c86f
    text-1.2.2.1-78576e9b1e5bd3089726a9044c764b870dda7b4864f6ab653a7e549915e3c95f
    vector-0.12.0.0-68d7a49b3716cd31e05a3cb85b8df049002f9a6aadac07500db8c471babf7a59
haddock-interfaces: /home/travis/.cabal/store/ghc-7.10.3/scientific-0.3.4.10-4fb9122650c920ae0afdfc5f5ef089be640e42c6bef638ac25a2a4986401cb96/share/doc/html/scientific.haddock
haddock-html: /home/travis/.cabal/store/ghc-7.10.3/scientific-0.3.4.10-4fb9122650c920ae0afdfc5f5ef089be640e42c6bef638ac25a2a4986401cb96/share/doc/html
