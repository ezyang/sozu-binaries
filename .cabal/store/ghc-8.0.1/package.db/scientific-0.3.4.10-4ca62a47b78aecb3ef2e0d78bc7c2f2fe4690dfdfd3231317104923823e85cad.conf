name: scientific
version: 0.3.4.10
id: scientific-0.3.4.10-4ca62a47b78aecb3ef2e0d78bc7c2f2fe4690dfdfd3231317104923823e85cad
key: scientific-0.3.4.10-4ca62a47b78aecb3ef2e0d78bc7c2f2fe4690dfdfd3231317104923823e85cad
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
abi: 837aa9305cd50dc34728bc445f998e5b
trusted: False
import-dirs: /home/travis/.cabal/store/ghc-8.0.1/scientific-0.3.4.10-4ca62a47b78aecb3ef2e0d78bc7c2f2fe4690dfdfd3231317104923823e85cad/lib
library-dirs: /home/travis/.cabal/store/ghc-8.0.1/scientific-0.3.4.10-4ca62a47b78aecb3ef2e0d78bc7c2f2fe4690dfdfd3231317104923823e85cad/lib
              /home/travis/.cabal/store/ghc-8.0.1/scientific-0.3.4.10-4ca62a47b78aecb3ef2e0d78bc7c2f2fe4690dfdfd3231317104923823e85cad/lib
data-dir: /home/travis/.cabal/store/ghc-8.0.1/scientific-0.3.4.10-4ca62a47b78aecb3ef2e0d78bc7c2f2fe4690dfdfd3231317104923823e85cad/share
hs-libraries: HSscientific-0.3.4.10-4ca62a47b78aecb3ef2e0d78bc7c2f2fe4690dfdfd3231317104923823e85cad
depends:
    base-4.9.0.0 binary-0.8.3.0 bytestring-0.10.8.1 containers-0.5.7.1
    deepseq-1.4.2.0 ghc-prim-0.5.0.0
    hashable-1.2.5.0-ac20901ea03390d9f93c5936f2a4875a9881aba5f50c41a7021bd79a50588229
    integer-gmp-1.0.0.1
    integer-logarithms-1.0.1-df4c148e0d3291c2ca40b04abbd500c0e62f5d59365345c59fd70c710d3d45b5
    text-1.2.2.1-6dd39317d9d2e9eba7d59d829b9928808ea2c1766ae54e05604c3fc15d9af106
    vector-0.12.0.0-5a4e36c2114a99319adccdb8239d5fef698d7cb85ea429398db5061649f9e9cf
haddock-interfaces: /home/travis/.cabal/store/ghc-8.0.1/scientific-0.3.4.10-4ca62a47b78aecb3ef2e0d78bc7c2f2fe4690dfdfd3231317104923823e85cad/share/doc/html/scientific.haddock
haddock-html: /home/travis/.cabal/store/ghc-8.0.1/scientific-0.3.4.10-4ca62a47b78aecb3ef2e0d78bc7c2f2fe4690dfdfd3231317104923823e85cad/share/doc/html
