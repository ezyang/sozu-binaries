name: scientific
version: 0.3.4.10
id: scientific-0.3.4.10-b74ea89d88d1a1d9d94273c7f83ea5705375d91db5ec219178b53332a415d540
key: scientific-0.3.4.10-b74ea89d88d1a1d9d94273c7f83ea5705375d91db5ec219178b53332a415d540
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
abi: 61fb205e0b460986b9b3d5886307d9b5
trusted: False
import-dirs: /Users/travis/.cabal/store/ghc-8.0.1/scientific-0.3.4.10-b74ea89d88d1a1d9d94273c7f83ea5705375d91db5ec219178b53332a415d540/lib
library-dirs: /Users/travis/.cabal/store/ghc-8.0.1/scientific-0.3.4.10-b74ea89d88d1a1d9d94273c7f83ea5705375d91db5ec219178b53332a415d540/lib
data-dir: /Users/travis/.cabal/store/ghc-8.0.1/scientific-0.3.4.10-b74ea89d88d1a1d9d94273c7f83ea5705375d91db5ec219178b53332a415d540/share
hs-libraries: HSscientific-0.3.4.10-b74ea89d88d1a1d9d94273c7f83ea5705375d91db5ec219178b53332a415d540
depends:
    base-4.9.0.0 binary-0.8.3.0 bytestring-0.10.8.1 containers-0.5.7.1
    deepseq-1.4.2.0 ghc-prim-0.5.0.0
    hashable-1.2.5.0-5de5af90c51935beb066357bc7eb61b3c49d4df451b89b84649488344792a909
    integer-gmp-1.0.0.1
    integer-logarithms-1.0.1-b2759f77b6e5749fb56edb3bfeb6bd34c93d928633154f3b0670d20a91b50294
    text-1.2.2.1-d0acaa92e9fb85d7444f53f19f3d973bd65daf6a34bc69c51e7b753193495eb4
    vector-0.12.0.0-c23575491807c6a98831c2669476ba2725fa9415e9ca4a17fac071c09ad4aa52
haddock-interfaces: /Users/travis/.cabal/store/ghc-8.0.1/scientific-0.3.4.10-b74ea89d88d1a1d9d94273c7f83ea5705375d91db5ec219178b53332a415d540/share/doc/html/scientific.haddock
haddock-html: /Users/travis/.cabal/store/ghc-8.0.1/scientific-0.3.4.10-b74ea89d88d1a1d9d94273c7f83ea5705375d91db5ec219178b53332a415d540/share/doc/html
